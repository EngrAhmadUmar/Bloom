class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        #our HashMap which will map our old nodes
        #to new nodes
        oldToNew = {}
        
        #our dfs function
        #this will be nested making things easier for us
        #because we dont need to pass in parameters everytime we call it
        #but we do need to pass in the node tho
        def dfs(node):
            #we check if it is in our hashmap,
            #if it is in our hashmap, that means we 
            #have already made a clone of it
            if node in oldToNew:
                #return that clone
                return oldToNew[node]
            
            #create a copy of this node
            #by using the node constructor
            #and we are going to gi
            copy = Node(node.val)
            #add the copy to our hashmap
            oldToNew[node] = copy
            
            #make copies of every neighbor of the original node
            for nei in node.neighbors:
                #run dfs on that neighbor
                #reture the copy that we create
                # and with that copy we are going to append it to
                # the neighbors of the original node
                copy.neighbors.append(dfs(nei))
                
            #return the copy that we just made
            return copy
        
        #call dfs on the node we are given
        #if if we dont have a node return None
        return dfs(node) if node else None
        
 Time Complexity - O(n) n is number of edges + vertices
