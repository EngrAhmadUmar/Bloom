class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        #initialize the width and height
        N = len(board[0])
        M = len(board)
        
        #length of word
        L = len(word)
        
        #write our helper method, it will take the row, column and position we are at for this word
        def helper(r, c, pos):
            #our base condition is if the position is greater than the length of the word
            if pos >= L:
                return True
            #else we check if we are inbound and the position we are at now is same as our position ar word
            elif 0 <= r < M and 0 <= c < N and board[r][c] == word[pos]:
                #we have to mark the cell we have visited once we are out of the recursion we can change it back
                temp = board[r][c]
                board[r][c] = None
                
                #now we recall our recursion, we do it for all positions up, down, left, right.
                if helper(r+1, c, pos+1) or helper(r-1, c, pos+1) or helper(r, c+1, pos+1) or helper(r, c-1, pos+1):
                    return True
                
                #restore our value of that visited cell
                board[r][c] = temp
                
            #return false if nothing is found
            return False
            
        #for each row in range(m) to each column in range(n)
        for r in range(M):
            for c in range(N):
                #if that returns a true, we return a true
                if helper(r, c, 0):
                    return True
                
        #other wise we have check all posible combinations and the word doesnt exits in the grid
        return False
time = o(m*n^2)
