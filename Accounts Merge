class Solution:
    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:
        
        #for this dfs solution we will need to build a graph, so the 
        #vertex for the graph is each email and the edge will be if two 
        #emails belong to the same group then we add an edge between those two emails
        
        #so for all emails that belong to the same account we will draw edges
        
        #our gragh
        #we use set because we want to avoid duplicates
        graph = collections.defaultdict(set)

        #email to name dictionary
        emailToName = {}

        #creating our graph
        for acct in accounts:
            name = acct[0]

            #build our edge for all emails
            #i chose email one, but i think it can be done with all the other emails
            #but ill use the first one
            email1 = acct[1]

            #arranging our email to name dictionary
            emailToName[email1] = name

            #we are building our edges
            #and they will all be bydirectional
            #since there is no sequence
            for email2 in acct[2:]:
                graph[email1].add(email2)
                graph[email2].add(email1)
                emailToName[email2] = name

        ans = []
        seen = set()
        
        #now that we have our graph created we can start with any of the emails,
        #we do a dfs, and we use a graph try to find all the neigbours
        #after each dfs, all the neighbors we can reach will be the emails that belong to the same group
        #now that we have the emails, the only thing left will be to get the name
        #and for that we will use our email to mail hashtable

        # starting to build our answers
        for email in emailToName:
            #if this email has not been seen
            # so if this email has not been traversed before.
            if email not in seen:
                stack = [email]
                seen.add(email)
                #we keep this to store the emails for the current group
                emails = []


                #now our dfs template
                while stack:
                    #we pop our what is in our stack
                    cur = stack.pop()
                    #we append the current emaill to our emails list
                    emails.append(cur)

                    for nei in graph[cur]:
                        if nei not in seen:
                            stack.append(nei)
                            seen.add(nei)
                #after this while loop we have all the emails that belong to the
                #current group
                #so we populate our final answer
                #the first one being name and then the email list which will be sorted
                ans.append([emailToName[email]] + sorted(emails))
        return ans
