class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        #we want to make sure that the end word is actually in the word list
        if endWord not in wordList:
                return 0
            
        #we create an adjacency list
        nei = collections.defaultdict(list)
        
        #we append the begin word to our wordList
        wordList.append(beginWord)
        
        #now lets build our adjacency list
        for word in wordList:
            #so we go through each position in our word and replace that value with #
            for j in range(len(word)):
                pattern = word[:j] + "#" + word[j + 1:]
                #we add this word to the values of patterm
                nei[pattern].append(word)
                
        #result of adjacency list shown below
        
        #, {'#ot': ['hot', 'dot', 'lot'], 'h#t': ['hot', 'hit'], 'ho#': ['hot'], 'd#t': ['dot'], 'do#': ['dot', 'dog'], '#og': ['dog', 'log', 'cog'], 'd#g': ['dog'], 'l#t': ['lot'], 'lo#': ['lot', 'log'], 'l#g': ['log'], 'c#g': ['cog'], 'co#': ['cog'], '#it': ['hit'], 'hi#': ['hit']})
            
        #we start our bfs
        #we dont want to visit the same position twice so we use a set
        visit = set([beginWord])
        #we need a queue so we add beginWord to the queue cuz that is where we are starting
        q = deque([beginWord])
        #we initialize the length of path/result to one
        res = 1
        while q:
            #we go through every node
            for i in range(len(q)):
                word = q.popleft()
                #if we have reach our end word we return the lenght of the path
                if word == endWord:
                    return res
                
                #else we find all the neighbors of this word and add them to the queue
                #to do that we find all the patterns that this word falls into then get the other words, then get the other words that fall into the same pattern.
                for j in range(len(word)):
                    pattern = word[:j] + "#" + word[j + 1:]
                    #using the pattern we can get all the neighbors of this node
                    for neiWord in nei[pattern]:
                        if neiWord not in visit:
                            visit.add(neiWord)
                            q.append(neiWord)
                            
            #we increment result by 1
            res += 1
        return 0
