class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        #so to do this we will use a default dictionary,
          #and use dictionaries are the values
            #so that way when we can easily check if a value exist in them
        graph = defaultdict(dict)
        N = len(equations)
        #creating our graphs
        for i in range(N):
            #the target is going to be the first item here, and the key is going to be the second item
            graph[equations[i][0]][equations[i][1]] = values[i]
            #the inverse relationship as well
            graph[equations[i][1]][equations[i][0]] = 1/values[i]
            
        #print to see outcome.
        # print(graph)
        # starting our dfs function
        def dfs(x, y, visited):
            #if the values don't exist in our graph
            #return -1
            if x not in graph or y not in graph:
                return -1
                
            #if x and y in graph return it immediately
            if y in graph[x]:
                return graph[x][y]
            
            #check if somewhere down the line we are are able to find to find y
            for i in graph[x]:
                if i not in visited:
                    visited.add(i)
                    #call dfs on i, y with i being our new x
                    temp = dfs(i, y, visited)
                    #if we were unable to find anything we just continue
                    if temp == -1:
                        continue
                    #else we return what ever temp as well as the current values value
                    else:
                        return temp * graph[x][i]
            #return -1 if we are unable to find anything
            return -1
        #initializing our result
        output = []
        
        for p,q in queries:
            #p being the source and q being the target
            # we run dfs
            #append our return value to output
            output.append(dfs(p,q,set()))
        return output
