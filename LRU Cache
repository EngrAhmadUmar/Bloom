from collections import OrderedDict
class LRUCache:

    def __init__(self, capacity: int):
        #for this we can use an ordered dictionary data structure, as it helps us maintain 
        #the order of the dictionary we we add and remove elements
        self.capacity = capacity
        self.dict = OrderedDict()

    def get(self, key: int) -> int:
        #we first check if the element is in our dictionary
        if key in self.dict:
            #if it is there we move it to end and then move it to end
            self.dict.move_to_end(key)
            #then we return our key since it exists
            return self.dict.get(key)
        else:
            #else we return -1 because it does not exist
            return -1

    def put(self, key: int, value: int) -> None:
        #here we check if the element exists
        if key in self.dict:
            #if it exists we change it to the recently used
            self.dict.move_to_end(key)
        #we update the value
        self.dict[key] = value
        
        #if the lenght of our dictionary exceeds our capacity
        if len(self.dict) > self.capacity:
            #we pop the last item
            self.dict.popitem(last=False)
            


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
